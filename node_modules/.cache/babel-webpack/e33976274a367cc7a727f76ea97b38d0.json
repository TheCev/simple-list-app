{"ast":null,"code":"import { throwError, BehaviorSubject } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nconst helper = new JwtHelperService();\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.loggedIn = new BehaviorSubject(false);\n      this.apiUrl = \"http://localhost:3000\";\n      this.checkToken();\n    }\n\n    get isLogged() {\n      return this.loggedIn.asObservable();\n    }\n\n    join(authData) {\n      return this.http.post(`${this.apiUrl}/users/`, authData);\n    }\n\n    login(authData) {\n      return this.http.post(`${this.apiUrl}/auth/login`, authData).pipe(map(res => {\n        //Save token()\n        const user = helper.decodeToken(res.token);\n        this.saveToken(user, res.token);\n        console.log(res);\n        this.loggedIn.next(true);\n        return res;\n      }));\n      catchError(err => this.handleError(err));\n    }\n\n    handleError(err) {\n      let errorMessage = \"An error ocurred retrieving data\";\n\n      if (err) {\n        errorMessage = `Error code: ${err.message}`;\n      }\n\n      window.alert(errorMessage);\n      return throwError(errorMessage);\n    }\n\n    saveToken(user, token) {\n      localStorage.setItem('user', JSON.stringify(user));\n      localStorage.setItem('token', token);\n      console.log(token);\n    }\n\n    readToken() {\n      return localStorage.getItem('token');\n    }\n\n    checkToken() {\n      const userToken = localStorage.getItem('token');\n\n      if (userToken) {\n        const isExpired = helper.isTokenExpired(userToken);\n        console.log(\"is expired => \", isExpired);\n\n        if (isExpired) {\n          this.logout();\n        } else {\n          this.loggedIn.next(true);\n        }\n      } else {\n        this.loggedIn.next(false);\n      } //set UserIsLogged = isExpired\n\n    }\n\n    logout() {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      this.router.navigate(['/login']);\n      this.loggedIn.next(false);\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthService.ɵprov = i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}